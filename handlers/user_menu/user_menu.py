from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.types import CallbackQuery, PreCheckoutQuery, Message
from data_base.data_commands import get_item, get_items
from keyboards.keyboards_admin import mane_admin
from configs.config import ADMINS, PAYMENTS_PROVIDER_TOKEN
from loader import dp, bot
from handlers.admin_menu.states import Purchase
import datetime
from keyboards.keyboards_mane import mane_menu
from handlers.admin_menu.callback import categories_keyboard, subcategories_keyboard, items_keyboard, item_keyboard, \
    menu_cd, buy_item
from data_base import data_base
from typing import Union

db = data_base.DBCommands()


@dp.message_handler(commands='start')
async def bot_start(message: types.Message):
    text = f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.full_name}!"
    if message.from_user.id == int(ADMINS):
        text += ('\n'
                 '–ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –≤–æ–π—Ç–∏ –≤ —Ä–µ–∂–∏–º –∞–¥–º–∏–Ω–∞ –≤–≤–µ–¥–∏ /admin_mod')
    await message.answer(text, reply_markup=mane_menu)


@dp.message_handler(text='üç¥ Menu')
async def show_items(message: types.Message):
    await list_categories(message)


@dp.message_handler(commands="admin_mod")
async def make_changes_command(message: types.Message):
    await message.delete()
    if message.from_user.id == int(ADMINS):
        await bot.send_message(message.chat.id, "–í–≤–µ–¥–∏ –∫–æ–º–∞–Ω–¥—É", reply_markup=mane_admin)
    else:
        await bot.send_message(message.chat.id, "–£ –í–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")


@dp.message_handler(user_id=ADMINS, text="/cansel", state=Purchase)
async def cansel(message: types.Message, state: FSMContext):
    await message.answer('–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –≤–≤–æ–¥')
    await state.reset_state()


async def list_categories(message: Union[CallbackQuery, Message], **kwargs):
    # –ö–ª–∞–≤–∏–∞—Ç—É—Ä—É —Ñ–æ—Ä–º–∏—Ä—É–µ–º —Å –ø–æ–º–æ—â—å—é —Å–ª–µ–¥—É—é—â–µ–π —Ñ—É–Ω–∫—Ü–∏–∏ (–≥–¥–µ –¥–µ–ª–∞–µ—Ç—Å—è –∑–∞–ø—Ä–æ—Å –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö)

    markup = await categories_keyboard()

    text = f"–ß—Ç–æ –∂–µ –∑–∞—Ö–æ—á–µ—Ç –∫—É–ø–∏—Ç—å {message.from_user.full_name} üòè ?"

    if isinstance(message, Message):
        await message.answer(text, reply_markup=markup)

    elif isinstance(message, CallbackQuery):
        call = message
        await call.message.edit_reply_markup(markup)


async def list_subcategories(callback: CallbackQuery, category, **kwargs):
    markup = await subcategories_keyboard(category)
    await callback.message.edit_reply_markup(markup)


async def list_items(callback: CallbackQuery, category, subcategory, **kwargs):
    markup = await items_keyboard(category, subcategory)
    await callback.message.edit_text(text="–°–º–æ—Ç—Ä–∏, —á—Ç–æ —É –Ω–∞—Å –µ—Å—Ç—å", reply_markup=markup)


# –§—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –æ—Ç–¥–∞–µ—Ç —É–∂–µ –∫–Ω–æ–ø–∫—É –ö—É–ø–∏—Ç—å —Ç–æ–≤–∞—Ä –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É —Ç–æ–≤–∞—Ä—É
async def show_item(callback: CallbackQuery, category, subcategory, item_id):
    markup = item_keyboard(category, subcategory, item_id)

    # –ë–µ—Ä–µ–º –∑–∞–ø–∏—Å—å –æ –Ω–∞—à–µ–º —Ç–æ–≤–∞—Ä–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    item = await get_item(item_id)
    text = f"–ö—É–ø–∏ {item.name}"
    await callback.message.edit_text(text=text, reply_markup=markup)


@dp.callback_query_handler(buy_item.filter())
async def buying_item(callback: CallbackQuery, callback_data: dict, state: FSMContext):
    item_id = int(callback_data.get('item_id'))
    await callback.message.edit_reply_markup()
    item = await data_base.Item.get(item_id)
    if not item:
        await callback.message.answer("–¢–∞–∫–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        return
    text = ('–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ /cansel')

    await callback.message.answer(text)
    await Purchase.enterquantity.set()
    await state.update_data(
        item=item,
        purchase=data_base.Purchase(
            item_id=item_id,
            purchase_time=datetime.datetime.now(),
            buyer=callback.from_user.id
        )
    )


@dp.message_handler(regexp=r"^(\d+)$", state=Purchase.enterquantity)
async def enter_quantity(message: types.Message, state: FSMContext):
    quantity = int(message.text)
    async with state.proxy() as data:
        data["purchase"].quantity = quantity
        item = data.get('item')
        amount = item.price * quantity
        data['purchase'].amount = amount

    markup = types.InlineKeyboardMarkup(row_width=3)
    markup.add(
        types.InlineKeyboardButton('–°–æ–≥–ª–∞—Å–µ–Ω', callback_data='agree'),
        types.InlineKeyboardButton('–ò–∑–º–µ–Ω–∏—Ç—å', callback_data='change'),
        types.InlineKeyboardButton('–û—Ç–º–µ–Ω–∏—Ç—å', callback_data='cansel')
    )

    await message.answer(('–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ç–æ–≤–∞—Ä "{name}",\n–≤ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ {quantity}, –ø–æ —Ü–µ–Ω–µ {price}‚ÇΩ –∑–∞ —à—Ç.\n'
                          '–°—É–º–º–∞ –∑–∞–∫–∞–∑–∞ {amount}‚ÇΩ. –í—ã –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ –∑–∞–∫–∞–∑?').format(quantity=quantity, name=item.name,
                                                                                    price=item.price,
                                                                                    amount=amount), reply_markup=markup)
    await Purchase.approval.set()


@dp.message_handler(state=Purchase.enterquantity)
async def enter_quantity(message: types.Message):
    await message.answer('–ù—É–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ —á–∏—Å–ª–æ')


@dp.callback_query_handler(text_contains='cansel', state=Purchase)
async def cansel_purchase(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_reply_markup()
    await callback.message.answer('–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –ø–æ–∫—É–ø–∫—É')
    await state.reset_state()


@dp.callback_query_handler(text_contains='change', state=Purchase.approval)
async def chancge_purchase(callback: CallbackQuery):
    await callback.message.edit_reply_markup()
    await callback.message.answer('–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ')
    await Purchase.enterquantity.set()


@dp.callback_query_handler(text_contains='agree', state=Purchase.approval)
async def agree_purchase(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_reply_markup()
    data = await state.get_data()
    purchase = data.get('purchase')
    item = data.get('item')
    photo = data.get('photo')
    prices = [
        types.LabeledPrice(label=item.name, amount=purchase.amount * 100),
    ]

    await purchase.create()
    await callback.message.answer("–ù–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ä–µ–∞–ª—å–Ω—É—é –∫–∞—Ä—Ç—É!\n"
                                  "Don't use real card!\n\n"
                                  "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–µ—Å—Ç–æ–≤—É—é –∫–∞—Ä—Ç—É!\n"
                                  "Use this test card number to pay for your Time Machine!\n\n"
                                  '4111 1111 1111 1111\n'
                                  '2024/12\n'
                                  '123\n'
                                  "3-D Secure:'12345678'\n"
                                  "\n\nThis is your demo invoice:", parse_mode='Markdown')

    await bot.send_invoice(chat_id=callback.from_user.id,
                           title=item.name.title(),
                           description=item.description.title(),
                           provider_token=PAYMENTS_PROVIDER_TOKEN,
                           currency='rub',
                           # photo='https://telegra.ph/file/d08ff863531f10bf2ea4b.jpg',
                           photo_height=512,  # !=0/None or picture won't be shown
                           photo_width=512,
                           photo_size=512,
                           is_flexible=True,  # True If you need to set up Shipping Fee
                           prices=prices,
                           start_parameter=item.name.title(),
                           payload=item.name.title())

    await state.update_data(purchase=purchase)
    await Purchase.payment.set()


@dp.pre_checkout_query_handler(state=Purchase.payment)
async def checkout(quary: PreCheckoutQuery, state: FSMContext):
    await bot.answer_pre_checkout_query(quary.id, True)
    data = await state.get_data()
    purchase: data_base.Purchase = data.get('purchase')
    success = await check_payment(purchase)
    if success:
        await purchase.update(
            success=True,
        ).apply()
        await state.reset_state()
        await bot.send_message(chat_id=quary.from_user.id, text='–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É')

    else:
        await bot.send_message(chat_id=quary.from_user.id, text='–ü–æ–∫—É–ø–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å')


async def check_payment(purchase: data_base.Purchase):
    return True


# –§—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –í–°–ï –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫–∏ –≤ —ç—Ç–æ–π –º–µ–Ω—é—à–∫–µ
@dp.callback_query_handler(menu_cd.filter())
async def navigate(call: CallbackQuery, callback_data: dict):
    """
    :param call: –¢–∏–ø –æ–±—ä–µ–∫—Ç–∞ CallbackQuery, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–∏–ª–µ—Ç–∞–µ—Ç –≤ —Ö–µ–Ω–¥–ª–µ—Ä
    :param callback_data: –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏, –∫–æ—Ç–æ—Ä—ã–µ —Ö—Ä–∞–Ω—è—Ç—Å—è –≤ –Ω–∞–∂–∞—Ç–æ–π –∫–Ω–æ–ø–∫–µ
    """

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å –º–µ–Ω—é, –∫–æ—Ç–æ—Ä—ã–π –∑–∞–ø—Ä–æ—Å–∏–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    current_level = callback_data.get("level")

    # –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é, –∫–æ—Ç–æ—Ä—É—é –≤—ã–±—Ä–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å (–ü–µ—Ä–µ–¥–∞–µ—Ç—Å—è –≤—Å–µ–≥–¥–∞)
    category = callback_data.get("category")

    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é, –∫–æ—Ç–æ—Ä—É—é –≤—ã–±—Ä–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å (–ü–µ—Ä–µ–¥–∞–µ—Ç—Å—è –ù–ï –í–°–ï–ì–î–ê - –º–æ–∂–µ—Ç –±—ã—Ç—å 0)
    subcategory = callback_data.get("subcategory")

    # –ü–æ–ª—É—á–∞–µ–º –∞–π–¥–∏ —Ç–æ–≤–∞—Ä–∞, –∫–æ—Ç–æ—Ä—ã–π –≤—ã–±—Ä–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å (–ü–µ—Ä–µ–¥–∞–µ—Ç—Å—è –ù–ï –í–°–ï–ì–î–ê - –º–æ–∂–µ—Ç –±—ã—Ç—å 0)
    item_id = int(callback_data.get("item_id"))

    # –ü—Ä–æ–ø–∏—Å—ã–≤–∞–µ–º "—É—Ä–æ–≤–Ω–∏" –≤ –∫–æ—Ç–æ—Ä—ã—Ö –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è –Ω–æ–≤—ã–µ –∫–Ω–æ–ø–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    levels = {
        "0": list_categories,  # –û—Ç–¥–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        "1": list_subcategories,  # –û—Ç–¥–∞–µ–º –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        "2": list_items,  # –û—Ç–¥–∞–µ–º —Ç–æ–≤–∞—Ä—ã
        "3": show_item  # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –∫—É–ø–∏—Ç—å —Ç–æ–≤–∞—Ä
    }

    # –ó–∞–±–∏—Ä–∞–µ–º –Ω—É–∂–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è
    current_level_function = levels[current_level]

    # –í—ã–ø–æ–ª–Ω—è–µ–º –Ω—É–∂–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –∏ –ø–µ—Ä–µ–¥–∞–µ–º —Ç—É–¥–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã, –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –∏–∑ –∫–Ω–æ–ø–∫–∏
    await current_level_function(
        call,
        category=category,
        subcategory=subcategory,
        item_id=item_id
    )
