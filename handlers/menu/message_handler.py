from aiogram import Bot, types
from aiogram.types.message import ContentTypes
from data import config
from loader import dp
from keyboards.inline.menu import menu

#   –≠—Ç–æ—Ç —Ñ–∞–π–ª –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –æ—Ç–ª–∞–≤–ª–∏–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –Ω–∞ –∫–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ –±–æ—Ç–∞
# –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è /start

# –ü—Ä–∏—Å–≤–∞–∏–≤–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥–∞ —Ç–æ–∫–µ–Ω–∞ –±–æ—Ç–∞. –¢–æ–∫–µ–Ω—ã –±–æ—Ç–∞ –Ω—É–∂–Ω–æ –ø—Ä–∏—Å–≤–∞–∏–≤–∞—Ç—å –≤ —Ñ–∞–π–ª–µ .env
# –¢–æ–∫–µ–Ω –±–æ—Ç–∞ –∏–∑ BotFather
bot = Bot(token=config.BOT_TOKEN, parse_mode=types.ParseMode.HTML)
# –¢–æ–∫–µ–Ω –æ–ø–ª–∞—Ç—ã –∏–∑ BotFather
PAYMENTS_PROVIDER_TOKEN = config.PAYMENTS_PROVIDER_TOKEN

# –¶–µ–Ω–∞ –∑–∞ —Ç–æ–≤–∞—Ä
prices = [
    types.LabeledPrice(label='Working Time Machine', amount=5750),
    types.LabeledPrice(label='Gift wrapping', amount=500),
]
# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è —Ü–µ–Ω–∞ –∑–∞ –¥–æ—Å—Ç–∞–≤–∫—É
shipping_options = [
    types.ShippingOption(id='instant', title='WorldWide Teleporter').add(types.LabeledPrice('Teleporter', 1000)),
    types.ShippingOption(id='pickup', title='Local pickup').add(types.LabeledPrice('Pickup', 300)),
]


# –û—Ç–ª–∞–≤–ª–∏–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "üõí Store"
@dp.message_handler(text="üõí Store")
async def button_store(message: types.Message):
    await message.answer(text="üõí Choose a product category!", reply_markup=menu)


# @dp.message_handler(text="üõí Base")
# async def button_base(message: types.Message):
#     for ret in cur.execute('SELECT * FROM menu').fetchall():
#         await bot.send_message(message.from_user.id, f'–ù–∞–∑–≤–∞–Ω–∏–µ: {ret[1]}\n–û–ø–∏—Å–∞–Ω–∏–µ: {ret[2]}\n–¶–µ–Ω–∞: {ret[3]}')


# –û—Ç–ª–∞–≤–ª–∏–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "‚ùó Info"
@dp.message_handler(text="‚ùó Info")
async def button_info(message: types.Message):
    await bot.send_message(message.chat.id,
                           "Hellow, –Ø TonyTestBot üöÄ\n"
                           "–î–ª—è –¥—Ä—É–∑–µ–π –ø—Ä–æ—Å—Ç–æ Tony üòè\n\n"
                           '–ü–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "Store"\n'
                           '–æ—Ç–∫—Ä–æ–µ—Ç—Å—è –∏–Ω—Ç–µ—Ä–Ω–µ—Ç –º–∞–≥–∞–∑–∏–Ω,\n'
                           '–≥–¥–µ —Ç—ã —Å–º–æ–∂–µ—à—å —Å–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑ üõí\n\n'
                           "–Ø –ø–æ–∫–∞ –Ω–µ –∑–∞–∫–æ–Ω—á–µ–Ω, –Ω–æ —Å–∫–æ—Ä–æ –≤—Å—ë –±—É–¥–µ—Ç üî•")


# @dp.message_handler(commands=['terms'])
# async def cmd_terms(message: types.Message):
#     await bot.send_message(message.chat.id,
#                            'Thank you for shopping with our demo bot. We hope you like your new time machine!\n'
#                            '1. If your time machine was not delivered on time, please rethink your concept of time'
#                            ' and try again.\n'
#                            '2. If you find that your time machine is not working, kindly contact our future service'
#                            ' workshops on Trappist-1e. They will be accessible anywhere between'
#                            ' May 2075 and November 4000 C.E.\n'
#                            '3. If you would like a refund, kindly apply for one yesterday and we will have sent it'
#                            ' to you immediately.')

@dp.message_handler(text="üõí CPU")
async def buy_cpu(message: types.Message):
    await bot.send_message(message.chat.id,
                           "–ù–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ä–µ–∞–ª—å–Ω—É—é –∫–∞—Ä—Ç—É!\n"
                           "Don't use real card!\n\n"
                           "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–µ—Å—Ç–æ–≤—É—é –∫–∞—Ä—Ç—É!\n"
                           "Use this test card number to pay for your Time Machine!\n\n"
                           '4111 1111 1111 1111\n'
                           '2024/12\n'
                           '123\n'
                           "3-D Secure:'12345678'\n"
                           "\n\nThis is your demo invoice:", parse_mode='Markdown')
    await bot.send_invoice(message.chat.id, title='Working Time Machine',
                           description='Want to visit your great-great-great-grandparents?'
                                       ' Make a fortune at the races?'
                                       ' Shake hands with Hammurabi and take a stroll in the Hanging Gardens?'
                                       ' Order our Working Time Machine today!',
                           provider_token=PAYMENTS_PROVIDER_TOKEN,
                           currency='usd',
                           photo_url='https://telegra.ph/file/d08ff863531f10bf2ea4b.jpg',
                           photo_height=512,  # !=0/None or picture won't be shown
                           photo_width=512,
                           photo_size=512,
                           is_flexible=True,  # True If you need to set up Shipping Fee
                           prices=prices,
                           start_parameter='time-machine-example',
                           payload='HAPPY FRIDAYS COUPON')


@dp.shipping_query_handler(lambda query: True)
async def shipping(shipping_query: types.ShippingQuery):
    await bot.answer_shipping_query(shipping_query.id, ok=True, shipping_options=shipping_options,
                                    error_message='–û, –∫–∞–∂–µ—Ç—Å—è, –Ω–∞—à–∏ –∫—É—Ä—å–µ—Ä—ã-—Å–æ–±–∞–∫–∏ —Å–µ–π—á–∞—Å –æ–±–µ–¥–∞—é—Ç.'
                                                  ' –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ!')


@dp.pre_checkout_query_handler(lambda query: True)
async def checkout(pre_checkout_query: types.PreCheckoutQuery):
    await bot.answer_pre_checkout_query(pre_checkout_query.id, ok=True,
                                        error_message="–ò–Ω–æ–ø–ª–∞–Ω–µ—Ç—è–Ω–µ –ø—ã—Ç–∞–ª–∏—Å—å —É–∫—Ä–∞—Å—Ç—å CVV –≤–∞—à–µ–π –∫–∞—Ä—Ç—ã,"
                                                      " –Ω–æ –º—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—â–∏—Ç–∏–ª–∏ –≤–∞—à–∏ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ,"
                                                      " –ø–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑ –∑–∞–ø–ª–∞—Ç–∏—Ç—å —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç, –Ω—É–∂–µ–Ω –Ω–µ–±–æ–ª—å—à–æ–π –æ—Ç–¥—ã—Ö..")


@dp.message_handler(content_types=ContentTypes.SUCCESSFUL_PAYMENT)
async def got_payment(message: types.Message):
    await bot.send_message(message.chat.id,
                           '–£—Ä–∞! –°–ø–∞—Å–∏–±–æ –∑–∞ –æ–ø–ª–∞—Ç—É! –ú—ã –æ–±—Ä–∞–±–æ—Ç–∞–µ–º –≤–∞—à –∑–∞–∫–∞–∑ –Ω–∞ `{} {}`'
                           ' –∫–∞–∫ –º–æ–∂–Ω–æ –±—ã—Å—Ç—Ä–µ–µ! –û—Å—Ç–∞–≤–∞–π—Ç–µ—Å—å –Ω–∞ —Å–≤—è–∑–∏.'
                           '\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /buy –µ—â–µ —Ä–∞–∑, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –ú–∞—à–∏–Ω—É –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –≤–∞—à–µ–≥–æ –¥—Ä—É–≥–∞!'.format(
                               message.successful_payment.total_amount / 100, message.successful_payment.currency),
                           parse_mode='Markdown')
