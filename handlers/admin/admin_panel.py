from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram import types
from aiogram.dispatcher import FSMContext
from loader import dp, bot
from aiogram.dispatcher.filters import Text
from data_base import sql_admin
from configs.config import ADMINS
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from keyboards.delete_item_admin import delete_item


# –ü–æ –∫–æ–º–∞–Ω–¥–µ "add" –∞–¥–º–∏–Ω –¥–æ–±–∞–≤–ª—è–µ—Ç —Ç–æ–≤–∞—Ä –≤ –±–∞–∑—É –±–æ—Ç–∞

class Store_items(StatesGroup):
    item_id = State()
    name = State()
    discription = State()
    price = State()
    amount = State()
    img_item = State()


@dp.message_handler(text="‚ûï Append", states=None)
async def cm_start(message: types.Message, state: FSMContext):
    for admin in ADMINS:
        if message.from_user.id == int(admin):
            await bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞")
            await Store_items.name.set()
        else:
            await state.finish()
            await message.reply('–£ –í–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞')


@dp.message_handler(state='*', commands='cansel')
@dp.message_handler(Text(equals='cansel', ignore_case=True), state='*')
async def cancel_handler(message: types.Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state is None:
        return
    await state.finish()
    await message.reply('–í–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–µ–∫—Ä–∞—â—ë–Ω.')


@dp.message_handler(state=Store_items.name)
async def load_name(message: types.Message, state: FSMContext):
    for admin in ADMINS:
        if message.from_user.id == int(admin):
            async with state.proxy() as data:
                data['name'] = message.text
            await Store_items.next()
            await message.reply('–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ')
        else:
            await state.finish()
            await bot.send_message(message.chat.id, "–£ –í–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")


@dp.message_handler(state=Store_items.discription)
async def load_name(message: types.Message, state: FSMContext):
    for admin in ADMINS:
        if message.from_user.id == int(admin):
            async with state.proxy() as data:
                data['discription'] = message.text
            await Store_items.next()
            await message.reply('–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É')
        else:
            await state.finish()
            await bot.send_message(message.chat.id, "–£ –í–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")


@dp.message_handler(lambda message: not message.text.isdigit(), state=Store_items.price)
async def process_load_price_invalid(message: types.Message):
    return await message.reply("–¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º.\n–í–≤–µ–¥–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —á–∏—Å–ª–æ")


@dp.message_handler(state=Store_items.price)
async def load_price(message: types.Message, state: FSMContext):
    for admin in ADMINS:
        if message.from_user.id == int(admin):
            async with state.proxy() as data:
                data['price'] = message.text
            await Store_items.next()
            await message.reply('–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞ –Ω–∞ —Å–∫–ª–∞–¥–µ')
        else:
            await state.finish()
            await bot.send_message(message.chat.id, "–£ –í–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")


@dp.message_handler(lambda message: not message.text.isdigit(), state=Store_items.amount)
async def process_load_load_amount_invalid(message: types.Message):
    return await message.reply("–ö–æ–ª–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º.\n–í–≤–µ–¥–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —á–∏—Å–ª–æ")


@dp.message_handler(state=Store_items.amount)
async def load_amount(message: types.Message, state: FSMContext):
    for admin in ADMINS:
        if message.from_user.id == int(admin):
            async with state.proxy() as data:
                data['amount'] = message.text
            await Store_items.next()
            await message.reply('–î–æ–±–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ\n\n'
                                '–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø–æ—Å—Ç–∞–≤—å—Ç–µ –≥–∞–ª–æ—á–∫—É\n'
                                '"–°–∂–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ"')
        else:
            await state.finish()
            await bot.send_message(message.chat.id, "–£ –í–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")


@dp.message_handler(content_types=['photo'], state=Store_items.img_item)
async def load_name(message: types.Message, state: FSMContext):
    for admin in ADMINS:
        if message.from_user.id == int(admin):
            async with state.proxy() as data:
                data['img_item'] = message.photo[0].file_id
            await message.reply('–î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã')
            await sql_admin.sql_append_item_store_menu(state)
            await state.finish()
        else:
            await state.finish()
            await bot.send_message(message.chat.id, "–£ –í–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")


@dp.message_handler(text='üóëÔ∏è Delete')
async def del_item(message: types.Message):
    for admin in ADMINS:
        if message.from_user.id == int(admin):
            read = await sql_admin.sql_read_store_menu()
            for ret in read:
                await bot.send_photo(message.from_user.id, ret[5],
                                     f"–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞: {ret[1]}", reply_markup=delete_item)


@dp.callback_query_handler(Text(startswith='delete '))
async def callback_delete(callback: types.CallbackQuery):
    await sql_admin.sql_delete_item_store_menu(callback.data.replace('delete ', ''))
    await callback.message.answer(text=f"{callback.data.replace('delete ', '')} —É–¥–∞–ª–µ–Ω–∞.")
    await callback.answer()
